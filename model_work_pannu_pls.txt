import pandas as pd
import numpy as np
from sklearn.impute import KNNImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# Load datasets
df_train = pd.read_csv("train.csv")
df_test = pd.read_csv("test.csv")
submission = pd.read_csv("submission.csv")

# Separate features and target
X = df_train.drop(columns=['target'])
y = df_train['target']

# -----------------------------
# Outlier Removal (IQR Method)
# -----------------------------
def remove_outliers_iqr(df):
    Q1 = df.quantile(0.25)
    Q3 = df.quantile(0.75)
    IQR = Q3 - Q1
    mask = ~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)
    return df[mask]

# Remove outliers only from X (training data)
X_clean = remove_outliers_iqr(X)
y_clean = y[X_clean.index]  # Match rows

# -----------------------------
# Handle Missing Values
# -----------------------------
imputer = KNNImputer(n_neighbors=5)
X_imputed = pd.DataFrame(imputer.fit_transform(X_clean), columns=X_clean.columns)
X_test_imputed = pd.DataFrame(imputer.transform(df_test), columns=df_test.columns)

# -----------------------------
# Feature Scaling
# -----------------------------
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)
X_test_scaled = scaler.transform(X_test_imputed)

# -----------------------------
# Train/Test Split
# -----------------------------
X_train, X_val, y_train, y_val = train_test_split(X_scaled, y_clean, test_size=0.2, random_state=42)

# -----------------------------
# Model Training
# -----------------------------
model = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)
model.fit(X_train, y_train)

# -----------------------------
# Evaluation
# -----------------------------
y_pred = model.predict(X_val)
print("Validation Accuracy:", accuracy_score(y_val, y_pred))
print(classification_report(y_val, y_pred))

# -----------------------------
# Prediction on Test Data
# -----------------------------
test_preds = model.predict(X_test_scaled)

# -----------------------------
# Output Submission
# -----------------------------
submission['target'] = test_preds
submission.to_csv("final_submission.csv", index=False)
print("âœ… Submission file 'final_submission.csv' created!")